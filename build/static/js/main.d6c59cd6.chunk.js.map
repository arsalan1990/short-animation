{"version":3,"sources":["hero1.png","components/Main.js","components/Contact.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","ref","useWebAnimations","flipInX","Fragment","src","hero1","className","alt","to","Contact","history","useHistory","useState","title","setTitle","content","setContent","contactEmail","setContactEmail","sendEmail","e","a","preventDefault","email","console","log","onClick","goBack","onSubmit","htmlFor","type","name","onChange","target","value","Routes","exact","path","component","Thanks","App","_contact","setPath","window","addEventListener","location","pathname","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yHAAAA,EAAOC,QAAU,IAA0B,mC,gMCsC5BC,EA9BF,WAAM,IAKRC,EAAOC,YAAiB,eAAIC,MAA5BF,IAGP,OACI,kBAAC,IAAMG,SAAP,KAEI,gCAEI,yBAAKH,IAAKA,GACV,yBAAKI,IAAKC,IAAOC,UAAW,QAASC,IAAI,OAEzC,6BACI,iDAA0B,6BAA1B,0BACA,kMAIA,kBAAC,IAAD,CAAMC,GAAG,YAAT,oB,yBCsBLC,EAjDC,WAEZ,IAAMC,EAAUC,cAFE,EAOQC,mBAAS,IAPjB,mBAOXC,EAPW,KAOJC,EAPI,OAQYF,mBAAS,IARrB,mBAQXG,EARW,KAQFC,EARE,OASsBJ,mBAAS,IAT/B,mBASXK,EATW,KASGC,EATH,KAWZC,EAAS,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sDACdD,EAAEE,iBAEEC,EAAQ,CACRV,QACAE,UACAE,gBAGJO,QAAQC,IAAI,gBAAiBF,GATf,2CAAH,sDAaf,OACI,kBAAC,IAAMpB,SAAP,KACG,4BAAQG,UAAU,OAAOoB,QAvBjB,WACXhB,EAAQiB,WAsBL,mBAEC,0BAAMrB,UAAU,UAAUsB,SAAUT,GAChC,+EAEA,2BAAOU,QAAQ,SAAf,mBACA,2BAAOC,KAAK,OAAOC,KAAK,QAAQC,SAAU,SAACZ,GAAD,OAAON,EAASM,EAAEa,OAAOC,UAEnE,2BAAOL,QAAQ,WAAf,qBACA,8BAAUE,KAAK,UAAWC,SAAU,SAACZ,GAAD,OAAOJ,EAAWI,EAAEa,OAAOC,UAE/D,2BAAOL,QAAQ,SAAf,mBACA,2BAAOC,KAAK,QAAQC,KAAK,QAAQC,SAAU,SAACZ,GAAD,OAAOF,EAAgBE,EAAEa,OAAOC,UAE3E,2BAAOJ,KAAK,SAASI,MAAM,oB,iBC1B5BC,EARA,kBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvC,IACjC,kBAAC,IAAD,CAAOqC,OAAK,EAACC,KAAK,WAAWC,UAAW7B,IACxC,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,gBAAgBC,UAAWC,QCwCtCC,MAjDf,WAAe,IA0BTC,EA1BS,EAGW7B,mBAAS,IAHpB,mBAGNyB,EAHM,KAGAK,EAHA,KAgCb,OA3BAC,OAAOC,iBAAiB,QAAQ,WAEE,aAA7BD,OAAOE,SAASC,UACjBJ,EAAQC,OAAOE,SAASC,aAmBT,aAFCT,IAGlBI,EAAY,4BAAI,kBAAC,IAAD,CAAMjC,GAAG,YAAT,gBAKhB,yBAAKF,UAAU,OACd,yBAAKA,UAAU,aACZ,6BACE,4BACE,4BAAI,kBAAC,IAAD,CAAME,GAAG,KAAT,0BAEN,4BACGiC,IAGL,kBAAC,EAAD,SCnCYM,QACW,cAA7BJ,OAAOE,SAASG,UAEe,UAA7BL,OAAOE,SAASG,UAEhBL,OAAOE,SAASG,SAASC,MACvB,2DCXNC,IAASC,OACT,kBAAC,IAAD,KACA,kBAAC,EAAD,OACkBC,SAASC,eAAe,SDyHpC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.d6c59cd6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hero1.7b6643fe.png\";","import React from \"react\";\n// import hero from \"../hero.svg\";\nimport hero1 from \"../hero1.png\";\nimport { Link } from \"react-router-dom\";\nimport '../index.css'\n\nimport useWebAnimations, {flipInX} from '@wellyshen/use-web-animations'\n\nconst Main = () => {\n\n //   const [joined, setJoined] = useState(\"\");\n //   const history = useHistory();\n\n    const {ref} = useWebAnimations({...flipInX})\n\n\n    return(\n        <React.Fragment>\n             {/* <Annie /> */}\n            <header>\n\n                <div ref={ref}>\n                <img src={hero1} className={\"hero1\"} alt=\" \"/> \n                </div>\n                <div>\n                    <h1>We build &amp; design <br/> kinetic applications.</h1>\n                    <p>Kinetic typography, is the technical term for “moving text.” \n                        It's an animation technique that mixes movement and text to convey ideas and evoke emotion. </p>\n                        \n                        \n                    <Link to=\"/contact\">Get in touch</Link>\n                </div>\n            </header>\n        </React.Fragment>\n    )\n}\n\n\nexport default Main;","import React, {useState} from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Contact = () => {\n\n    const history = useHistory();\n    const goBack = () => {\n        history.goBack();\n    }\n\n    const [title, setTitle] = useState(\"\");\n    const [content, setContent] = useState(\"\");\n    const [contactEmail, setContactEmail] = useState(\"\"); \n\n    const sendEmail = async(e) =>{\n        e.preventDefault();\n\n        let email = {\n            title,\n            content,\n            contactEmail\n        }\n\n        console.log(\"sending email\", email);\n    }\n\n\n    return(\n        <React.Fragment>\n           <button className=\"back\" onClick={goBack}> &larr; Go Back</button>\n\n            <form className=\"contact\" onSubmit={sendEmail}>\n                <h2>Send me a message so we can start a new project</h2>\n                \n                <label htmlFor=\"title\">Message Title: </label>\n                <input type=\"text\" name=\"title\" onChange={(e) => setTitle(e.target.value)} />\n                \n                <label htmlFor=\"content\">Message Content: </label>\n                <textarea name=\"content\"  onChange={(e) => setContent(e.target.value)}  ></textarea>\n            \n                <label htmlFor=\"email\">Contact Email: </label>\n                <input type=\"email\" name=\"email\" onChange={(e) => setContactEmail(e.target.value)} />\n\n                <input type=\"submit\" value=\"Send Message\" />\n            </form>\n\n        </React.Fragment>\n    )\n\n}\n\n\nexport default Contact;","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\n//components\nimport Main from \"./components/Main\";\nimport Contact from \"./components/Contact\";\nimport Thanks from \"./components/Thanks\";\n\n\nconst Routes = () => (\n    <Switch>\n        <Route exact path=\"/\" component={Main} />\n        <Route exact path=\"/contact\" component={Contact} />\n        <Route exact path=\"/thanks/:name\" component={Thanks} />\n    </Switch>\n);\n\nexport default Routes;\n","import React, { useState } from 'react';\nimport Routes from \"./routes\";\nimport { Link } from \"react-router-dom\";\n \nfunction App() {\n\n // const history = useHistory();\n  const [path, setPath] = useState(\"\");\n\n  window.addEventListener(\"load\", () => {\n    \n    if(window.location.pathname === \"/contact\"){\n      setPath(window.location.pathname);\n    }\n  });\n\n\n  // const checkPath = () => {\n  //   history.listen((location) => {\n  //     setPath(location.pathname);\n  //   });\n  // }\n\n\n  // useEffect(() => {\n  //   checkPath();\n  // }, []);\n\n\n  const showContact = path;\n  let _contact;\n  if(showContact !== \"/contact\"){\n    _contact = (<li><Link to=\"/contact\">Contact Me</Link></li>)\n  }\n\n\n  return (\n    <div className=\"App\">\n     <div className=\"container\">\n        <nav>\n          <ul>\n            <li><Link to=\"/\"> Kinetic Typography </Link></li>\n          </ul>\n          <ul>\n            {_contact}\n          </ul>\n        </nav>\n        <Routes />\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n<BrowserRouter>\n<App />\n</BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}